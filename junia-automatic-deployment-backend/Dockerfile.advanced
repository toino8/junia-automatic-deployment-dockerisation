# Étape 1 : Utiliser l'image qui contient 'uv' (astral-sh/uv) pour récupérer l'exécutable 'uv'
FROM ghcr.io/astral-sh/uv:latest as uv_image

# Étape 2 : Créer un environnement virtuel dans l'image de base Python
FROM python:3.12-slim as builder

# Copier l'exécutable 'uv' depuis l'image intermédiaire (uv_image)
COPY --from=uv_image /uv /usr/local/bin/uv

# Copier les fichiers de l'application
COPY main.py /main.py
COPY config ./config
COPY routes ./routes
COPY pyproject.toml .
COPY uv.lock .

# Créer un environnement virtuel et installer les dépendances
RUN --mount=type=cache,target=/root/.cache/uv \
 --mount=type=bind,source=uv.lock,target=uv.lock \
 --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
 uv sync --frozen --no-install-project --no-editable

# Étape 3 : Construire l'image finale
FROM python:3.12-slim

# Copier l'environnement virtuel et l'exécutable 'uv' depuis l'étape précédente
COPY --from=builder /.venv /.venv

# Copier les fichiers restants de l'application
COPY main.py /main.py
COPY config ./config
COPY routes ./routes

ENV PATH="/.venv/bin:$PATH"
ENV PYTHONPATH="/.venv/lib/python3.12/site-packages"

# Créer un utilisateur non-root (facultatif)
ARG USERNAME=nonroot
ARG USER_UID=65532
ARG USER_GID=$USER_UID

# Créer l'utilisateur et changer les permissions
RUN groupadd --gid $USER_GID $USERNAME && \
    useradd --uid $USER_UID --gid $USER_GID -m $USERNAME

# Changer les permissions des fichiers copiés
RUN chown -R $USER_UID:$USER_GID /main.py /config /routes /uv.lock /pyproject.toml

# Passer à l'utilisateur non-root
USER $USERNAME

# Exposer le port 8501
EXPOSE 8501

# Commande par défaut pour lancer l'application
CMD [ "uv", "run", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000" ]

